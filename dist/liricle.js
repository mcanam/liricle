/*!
 * liricle v4.0.5
 * Lyrics Synchronizer
 * https://github.com/mcanam/liricle#readme
 * MIT license by mcanam
 */
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t="undefined"!=typeof globalThis?globalThis:t||self).Liricle=n()}(this,(function(){"use strict";const t=/\[(ar|ti|al|au|by|length|offset|re|ve):(.*)\]/i,n=/\[\d{2}:\d{2}(.\d{2,})?\]/g,e=/<\d{2}:\d{2}(.\d{2,})?>/g,i=/<\d{2}:\d{2}(.\d{2,})?>\s*[^\s|<]*/g;function s(s,l){const c=s.split(/\r?\n/).map((t=>t.trim())),u=l?.skipBlankLine??!0,d={tags:{},lines:[],enhanced:a(s)};return c.forEach((s=>{if(!s)return;const a=function(n){const e=n.match(t),i=e?.[1],s=e?.[2];return i&&s?{[i]:s.trim()}:null}(s),l=function(t,s){const a=[],l=t.match(n);return l?(l.forEach((n=>{const l=o(t);if(!l&&s)return;const c=r(n),u=function(t){const n=[],s=t.match(i);return s?(s.forEach((t=>{const i=t.match(e)?.[0];i&&n.push({time:r(i),text:o(t)})})),n):null}(t);a.push({time:c,text:l,words:u})})),a):null}(s,u);a&&Object.assign(d.tags,a),l&&d.lines.push(...l)})),d.lines=d.lines.sort(((t,n)=>t.time-n.time)),d}function r(t){return function(t){let[n,e]=t.split(":");return n=60*parseFloat(n),e=parseFloat(e),n+e}(t.replace(/\[|\]|<|>/g,""))}function o(t){return t.replace(n,"").replace(e,"").replace(/\s{2,}/g," ").trim()}function a(t){return i.test(t)}function l(t,n){let e=function(t,n){const e=c(t,n);return null!==e?{index:e,...t[e]}:null}(t.lines,n),i=null;return t.enhanced&&e?.words&&(i=function(t,n){if(!t)return null;const e=c(t,n);return null!==e?{index:e,...t[e]}:null}(e.words,n)),delete e?.words,{line:e,word:i}}function c(t,n){const e=[];if(t.forEach((t=>{const i=n-t.time;i>=0&&e.push(i)})),0===e.length)return null;const i=Math.min(...e);return e.indexOf(i)}return class{#t=null;#n=0;#e=null;#i=null;#s=!1;#r=()=>{};#o=()=>{};get data(){return this.#t}get offset(){return this.#n}set offset(t){this.#n=t/1e3}load(t){const n=t?.text,e=t?.url,i=t?.skipBlankLine??!0;if(!n?.trim()&&!e?.trim())throw Error("[Liricle]: text or url options required.");if(n&&e)throw Error("[Liricle]: text and url options cant be used together.");this.#s=!1,this.#e=null,this.#i=null,n&&(this.#t=s(n,{skipBlankLine:i}),this.#s=!0,this.#r(this.#t)),e&&fetch(e).then((t=>{if(!t.ok)throw Error("network error with status "+t.status);return t.text()})).then((t=>{this.#t=s(t,{skipBlankLine:i}),this.#s=!0,this.#r(this.#t)})).catch((t=>{throw Error("[Liricle]: failed to load lyrics because "+t.message)}))}sync(t,n=!1){if(!this.#s||!this.#t)return console.warn("[Liricle]: lyrics not loaded yet.");const{enhanced:e}=this.#t,{line:i,word:s}=l(this.#t,t+this.#n);if(!i&&!s)return;if(n)return this.#o(i,s);const r=null!==i&&i.index===this.#e,o=null!==s&&s.index===this.#i;e&&s&&r&&o||!e&&r||(this.#o(i,s),this.#e=i?.index??null,this.#i=s?.index??null)}on(t,n){switch(t){case"load":this.#r=n;break;case"sync":this.#o=n}}}}));
//# sourceMappingURL=liricle.js.map
